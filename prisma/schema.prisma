// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  GAMEREC
  KNOWLEDGE
  TOOLS
  HISTORY
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  emailVerified    DateTime?
  image            String?
  role             Role              @default(USER)
  posts            Post[]
  accounts         Account[]
  Profile          Profile?
  VerificationCode VerificationCode?
  likes            Like[]
  comments         Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationCode {
  id       Int      @id @default(autoincrement())
  code     String
  expireAt DateTime
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String    @db.VarChar(255)
  imageUrl  String?
  content   Json
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  category  Category
  tags      Tag[]
  likes     Like[]
  comments  Comment[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int

  @@id([userId, postId])
}

model Comment {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  content String

  @@id([userId, postId])
}
